# The install definition contains the commands needed to create a Ubuntu
# 22.04.3 LTS virtual machine capable of running your tests.
#
# This is where you install required programming languages, databases and other
# supporting libraries.
#
# The build installation is cached as a virtual machine image for subsequent
# check runs. When the install section changes, the virtual machine image is
# re-created.
#
# Installation commands are specified as a TOML multi-line string.
#
# N.B. Shell commands MUST execute non-interactively. For example, commands
# requiring user input will hang until the check run is cancelled or after a
# 15 minute timeout.
[env]
NEEDRESTART_MODE="a"
DEBIAN_FRONTEND="noninteractive"
CI="true"

[setup]
packages = '''
# clear-cache: da27c644-bc2e-4e14-acd4-fa7f7a002084
sudo apt update -y

# Operating system dependencies
sudo DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends -yq \
  advancecomp gifsicle jpegoptim libjpeg-progs optipng pngcrush pngquant \
  imagemagick jhead libtool nodejs build-essential curl git \
  libxslt1-dev libcurl4-openssl-dev libksba8 libksba-dev libreadline-dev \
  libssl-dev zlib1g-dev libsnappy-dev libyaml-dev

# Install oxipng
wget https://github.com/shssoichiro/oxipng/releases/download/v8.0.0/oxipng-8.0.0-x86_64-unknown-linux-musl.tar.gz && \
tar -xzvf oxipng-8.0.0-x86_64-unknown-linux-musl.tar.gz && \
sudo cp oxipng-8.0.0-x86_64-unknown-linux-musl/oxipng /usr/local/bin && \
rm oxipng-8.0.0-x86_64-unknown-linux-musl.tar.gz && \
rm -Rf oxipng-8.0.0-x86_64-unknown-linux-musl

# Databases
sudo DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends -yq \
  postgresql postgresql-server-dev-all postgresql-contrib libpq-dev \
  libsqlite3-dev sqlite3

curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg
echo "deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main" | sudo tee -a /etc/apt/sources.list.d/redis.list
sudo apt-get update -y
sudo apt-get install redis -y

sudo su postgres -c "createuser $USER --superuser"
sudo sed -i 's/host\s+all\s+all\s+127.0.0.1\/32\s+scram-sha-256/host all all 127.0.0.1\/32 trust/' /etc/postgresql/14/main/pg_hba.conf
sudo systemctl restart postgresql

# NodeJS
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
nvm install 18
nvm alias default 18
nvm use 18
npm install -g npm@10.4.0 svgo yarn
yarn install --ignore-scripts

# Ruby
\curl -sSL https://get.rvm.io | bash -s -- --ignore-dotfiles
echo "source $HOME/.rvm/scripts/rvm" >> ~/.bashrc
source $HOME/.rvm/scripts/rvm
rvm install ruby-3.2.1
gem update --system --no-doc

# Rails
bundle install --jobs 4 --retry 5
createdb discourse_test
createdb discourse_test_multisite
RAILS_ENV=test bundle exec rails db:migrate
'''

# The setup definition specifies commands to execute before running your test
# suites.
#
# Use the setup definition to update your project dependencies or compile classes.
# For example, in a ruby project here's where you run bundle install.
#
# Unlike the install definition, setup is not cached and therefore executes on
# every build.
test_suite = '''
bundle install --deployment --jobs 4 --retry 5
RAILS_ENV=test bundle exec rails db:migrate
'''

# Test suites are inferred from each TOML key ending with test_suite.
#
# Specify multiple test suites by adding test_suite keys. For example:
# [test_suite."system tests"]
# [test_suite.integration]
#
# Create a default test_suite if your build only requires one test suite.
[test_suite.default]

# A string specifying the command which executes one test file.
#
# The test file is passed as the last argument to the command.
command = "bin/rspec"

# An array of file path globs which expands to a list of files. File paths are
# relative to the project directory.
#
# Each file is passed as the last argument to your test command.
# Default test suite
# files = ["spec/**/*_spec.rb"]
files = ["spec/models/user_spec.rb"]

# An array of file path globs which expands to a list of files. File paths are
# relative to the project directory.
#
# No tests will be executed with any files matched in this definition section.
ignore = [
  "spec/models/IGNORE_spec.rb"
]